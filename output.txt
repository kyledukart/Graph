Sun Feb 17 22:26:58 PST 2019
*** Compiling
graph.cpp:253:30: warning: unused parameter ‘startLabel’ [-Wunused-parameter]
 int Graph::MST(const string &startLabel,
                              ^
graph.cpp:255:55: warning: unused parameter ‘visit’ [-Wunused-parameter]
                           const string &to, int weight)) const {
                                                       ^
*** cpplint
Done processing graph.cpp
Done processing graph_test.cpp
Done processing main.cpp
Skipping input '*.hpp': Can't open for reading
*** cppcheck
Checking graph.cpp...
[graph.cpp:253] -> [graph.h:129]: (performance, inconclusive) Technically the member function 'Graph::MST' can be static.
[graph.cpp:143] -> [graph.cpp:142]: (error) Iterator 'it' used after element has been erased.
[graph.cpp:72]: (performance) Prefer prefix ++/-- operators for non-primitive types.
1/3 files checked 59% done
Checking graph_test.cpp...
2/3 files checked 98% done
Checking main.cpp...
3/3 files checked 100% done
[graph.cpp:253]: (style) The function 'MST' is never used.
[graph_test.cpp:44]: (style) The function 'edgeVisitor' is never used.
[graph_test.cpp:112]: (style) The function 'testGraph0DFS' is never used.
[graph_test.cpp:174]: (style) The function 'testGraph0Dijkstra' is never used.
[graph_test.cpp:205]: (style) The function 'testGraph1' is never used.
*** running
testGraph0BFS
Done.
*** running with valgrind
==17579== Memcheck, a memory error detector
==17579== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==17579== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==17579== Command: ./myprogram.exe
==17579==
testGraph0BFS
Done.
==17579==
==17579== HEAP SUMMARY:
==17579==     in use at exit: 72,704 bytes in 1 blocks
==17579==   total heap usage: 43 allocs, 42 frees, 84,672 bytes allocated
==17579==
==17579== LEAK SUMMARY:
==17579==    definitely lost: 0 bytes in 0 blocks
==17579==    indirectly lost: 0 bytes in 0 blocks
==17579==      possibly lost: 0 bytes in 0 blocks
==17579==    still reachable: 72,704 bytes in 1 blocks
==17579==         suppressed: 0 bytes in 0 blocks
==17579== Rerun with --leak-check=full to see details of leaked memory
==17579==
==17579== For counts of detected and suppressed errors, rerun with: -v
==17579== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
*** cleaning up
Sun Feb 17 22:27:01 PST 2019
